{"ast":null,"code":"import { gapi, gapiComplete } from './gapiScript';\n/**\n * Function to load gapi auth2 from a gapi that you provied\n * Check full docs here: https://developers.google.com/identity/sign-in/web/reference#auth_setup\n * @param {Object} gapiScript gapi script object\n * @param {string} clientId Your google clientID string\n * @param {Array.<string[]>} scopes The scopes to request, as a space-delimited string. Optional if fetch_basic_profile is not set to false. Check possible scopes on google docs: https://developers.google.com/identity/protocols/oauth2/scopes\n */\n\nconst loadAuth2 = async function (gapiScript, clientId, scopes, discovery) {\n  return new Promise(resolve => {\n    gapiScript.load('auth2', () => {\n      resolve(gapiScript.auth2.init({\n        client_id: clientId,\n        scope: scopes,\n        discoveryDocs: discovery\n      }));\n    });\n  });\n};\n/**\n * Function to init gapi auth2 with props\n * @param {Object} gapiScript gapi script object\n * @param {*} props Possible props to init gapi auth2, check the options on google docs: https://developers.google.com/identity/sign-in/web/reference#gapiauth2clientconfig\n */\n\n\nconst loadAuth2WithProps = async function (gapiScript, props) {\n  return new Promise(resolve => {\n    gapiScript.load('auth2', () => {\n      resolve(gapiScript.auth2.init(props));\n    });\n  });\n};\n/**\n *\n * @param {Object} gapiScript gapi script object\n * @param {string} clientId Your google clientID string\n * @param {Array.<string[]>} scopes The scopes to request, as a space-delimited string. Optional if fetch_basic_profile is not set to false. Check possible scopes on google docs: https://developers.google.com/identity/protocols/oauth2/scopes\n */\n\n\nconst loadClientAuth2 = async function (gapiScript, clientId, scopes) {\n  return new Promise(resolve => {\n    gapiScript.load('client', () => {\n      resolve(gapiScript.client.init({\n        client_id: clientId,\n        scope: scopes,\n        discoveryDocs: discovery\n      }));\n    });\n    gapiScript.load('auth2', () => {\n      resolve(gapiScript.client.init({\n        client_id: clientId,\n        scope: scopes,\n        discoveryDocs: discovery\n      }));\n    });\n  });\n};\n/**\n * A very special function to load the gapi inside the DOM, directly.\n * So it'll load the real and most recent gapi-scrip from google and attach to DOM:\n * let gapi = loadGapiInsideDOM();\n * Now you can use it anywhere.\n */\n\n\nconst loadGapiInsideDOM = async function () {\n  return new Promise(resolve => {\n    const element = document.getElementsByTagName('script')[0];\n    const js = document.createElement('script');\n    js.id = 'google-platform';\n    js.src = '//apis.google.com/js/platform.js';\n    js.async = true;\n    js.defer = true;\n    element.parentNode.insertBefore(js, element);\n\n    js.onload = async () => {\n      resolve(window.gapi);\n    };\n  });\n};\n\nexport { gapi, gapiComplete, loadAuth2, loadAuth2WithProps, loadClientAuth2, loadGapiInsideDOM };","map":{"version":3,"sources":["/Users/johncomonitski/Programming Projects/Dashboard2/Dashboard/node_modules/gapi-script/index.js"],"names":["gapi","gapiComplete","loadAuth2","gapiScript","clientId","scopes","discovery","Promise","resolve","load","auth2","init","client_id","scope","discoveryDocs","loadAuth2WithProps","props","loadClientAuth2","client","loadGapiInsideDOM","element","document","getElementsByTagName","js","createElement","id","src","async","defer","parentNode","insertBefore","onload","window"],"mappings":"AAAA,SAASA,IAAT,EAAeC,YAAf,QAAmC,cAAnC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,SAAS,GAAG,gBAAgBC,UAAhB,EAA4BC,QAA5B,EAAsCC,MAAtC,EAA8CC,SAA9C,EAAyD;AACzE,SAAO,IAAIC,OAAJ,CAAYC,OAAO,IAAI;AAC5BL,IAAAA,UAAU,CAACM,IAAX,CAAgB,OAAhB,EAAyB,MAAM;AAC7BD,MAAAA,OAAO,CAACL,UAAU,CAACO,KAAX,CAAiBC,IAAjB,CAAsB;AAC5BC,QAAAA,SAAS,EAAER,QADiB;AAE5BS,QAAAA,KAAK,EAAER,MAFqB;AAG5BS,QAAAA,aAAa,EAAER;AAHa,OAAtB,CAAD,CAAP;AAKD,KAND;AAOD,GARM,CAAP;AASD,CAVD;AAYA;AACA;AACA;AACA;AACA;;;AACA,MAAMS,kBAAkB,GAAG,gBAAgBZ,UAAhB,EAA4Ba,KAA5B,EAAmC;AAC5D,SAAO,IAAIT,OAAJ,CAAYC,OAAO,IAAI;AAC5BL,IAAAA,UAAU,CAACM,IAAX,CAAgB,OAAhB,EAAyB,MAAM;AAC7BD,MAAAA,OAAO,CAACL,UAAU,CAACO,KAAX,CAAiBC,IAAjB,CAAsBK,KAAtB,CAAD,CAAP;AACD,KAFD;AAGD,GAJM,CAAP;AAKD,CAND;AAQA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,eAAe,GAAG,gBAAgBd,UAAhB,EAA4BC,QAA5B,EAAsCC,MAAtC,EAA8C;AACpE,SAAO,IAAIE,OAAJ,CAAYC,OAAO,IAAI;AAC1BL,IAAAA,UAAU,CAACM,IAAX,CAAgB,QAAhB,EAA0B,MAAM;AAC5BD,MAAAA,OAAO,CAACL,UAAU,CAACe,MAAX,CAAkBP,IAAlB,CAAuB;AAC3BC,QAAAA,SAAS,EAAER,QADgB;AAE3BS,QAAAA,KAAK,EAAER,MAFoB;AAG3BS,QAAAA,aAAa,EAAER;AAHY,OAAvB,CAAD,CAAP;AAKH,KAND;AAOAH,IAAAA,UAAU,CAACM,IAAX,CAAgB,OAAhB,EAAyB,MAAM;AAC3BD,MAAAA,OAAO,CAACL,UAAU,CAACe,MAAX,CAAkBP,IAAlB,CAAuB;AAC3BC,QAAAA,SAAS,EAAER,QADgB;AAE3BS,QAAAA,KAAK,EAAER,MAFoB;AAG3BS,QAAAA,aAAa,EAAER;AAHY,OAAvB,CAAD,CAAP;AAKH,KAND;AAOH,GAfM,CAAP;AAgBD,CAjBD;AAmBA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMa,iBAAiB,GAAG,kBAAkB;AAC1C,SAAO,IAAIZ,OAAJ,CAAYC,OAAO,IAAI;AAC5B,UAAMY,OAAO,GAAGC,QAAQ,CAACC,oBAAT,CAA8B,QAA9B,EAAwC,CAAxC,CAAhB;AACA,UAAMC,EAAE,GAAGF,QAAQ,CAACG,aAAT,CAAuB,QAAvB,CAAX;AACAD,IAAAA,EAAE,CAACE,EAAH,GAAQ,iBAAR;AACAF,IAAAA,EAAE,CAACG,GAAH,GAAS,kCAAT;AACAH,IAAAA,EAAE,CAACI,KAAH,GAAW,IAAX;AACAJ,IAAAA,EAAE,CAACK,KAAH,GAAW,IAAX;AACAR,IAAAA,OAAO,CAACS,UAAR,CAAmBC,YAAnB,CAAgCP,EAAhC,EAAoCH,OAApC;;AACAG,IAAAA,EAAE,CAACQ,MAAH,GAAY,YAAY;AACtBvB,MAAAA,OAAO,CAACwB,MAAM,CAAChC,IAAR,CAAP;AACD,KAFD;AAGD,GAXM,CAAP;AAYD,CAbD;;AAeA,SACEA,IADF,EAEEC,YAFF,EAGEC,SAHF,EAIEa,kBAJF,EAKEE,eALF,EAMEE,iBANF","sourcesContent":["import { gapi, gapiComplete } from './gapiScript';\n\n/**\n * Function to load gapi auth2 from a gapi that you provied\n * Check full docs here: https://developers.google.com/identity/sign-in/web/reference#auth_setup\n * @param {Object} gapiScript gapi script object\n * @param {string} clientId Your google clientID string\n * @param {Array.<string[]>} scopes The scopes to request, as a space-delimited string. Optional if fetch_basic_profile is not set to false. Check possible scopes on google docs: https://developers.google.com/identity/protocols/oauth2/scopes\n */\nconst loadAuth2 = async function (gapiScript, clientId, scopes, discovery) {\n  return new Promise(resolve => {\n    gapiScript.load('auth2', () => {\n      resolve(gapiScript.auth2.init({\n        client_id: clientId,\n        scope: scopes,\n        discoveryDocs: discovery\n      }));\n    });\n  });\n}\n\n/**\n * Function to init gapi auth2 with props\n * @param {Object} gapiScript gapi script object\n * @param {*} props Possible props to init gapi auth2, check the options on google docs: https://developers.google.com/identity/sign-in/web/reference#gapiauth2clientconfig\n */\nconst loadAuth2WithProps = async function (gapiScript, props) {\n  return new Promise(resolve => {\n    gapiScript.load('auth2', () => {\n      resolve(gapiScript.auth2.init(props));\n    });\n  });\n}\n\n/**\n *\n * @param {Object} gapiScript gapi script object\n * @param {string} clientId Your google clientID string\n * @param {Array.<string[]>} scopes The scopes to request, as a space-delimited string. Optional if fetch_basic_profile is not set to false. Check possible scopes on google docs: https://developers.google.com/identity/protocols/oauth2/scopes\n */\nconst loadClientAuth2 = async function (gapiScript, clientId, scopes) {\n  return new Promise(resolve => {\n      gapiScript.load('client', () => {\n          resolve(gapiScript.client.init({\n              client_id: clientId,\n              scope: scopes,\n              discoveryDocs: discovery\n          }));\n      });\n      gapiScript.load('auth2', () => {\n          resolve(gapiScript.client.init({\n              client_id: clientId,\n              scope: scopes,\n              discoveryDocs: discovery\n          }));\n      });\n  });\n}\n\n/**\n * A very special function to load the gapi inside the DOM, directly.\n * So it'll load the real and most recent gapi-scrip from google and attach to DOM:\n * let gapi = loadGapiInsideDOM();\n * Now you can use it anywhere.\n */\nconst loadGapiInsideDOM = async function () {\n  return new Promise(resolve => {\n    const element = document.getElementsByTagName('script')[0];\n    const js = document.createElement('script');\n    js.id = 'google-platform';\n    js.src = '//apis.google.com/js/platform.js';\n    js.async = true;\n    js.defer = true;\n    element.parentNode.insertBefore(js, element);\n    js.onload = async () => {\n      resolve(window.gapi);\n    }\n  });\n}\n\nexport {\n  gapi,\n  gapiComplete,\n  loadAuth2,\n  loadAuth2WithProps,\n  loadClientAuth2,\n  loadGapiInsideDOM,\n};\n"]},"metadata":{},"sourceType":"module"}